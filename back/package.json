{
  "_args": [
    [
      "back@https://registry.npmjs.org/back/-/back-0.1.5.tgz",
      "/home/gilles/Documents/development/development-environment"
    ]
  ],
  "_from": "back@>=0.1.0 <0.2.0",
  "_id": "back@0.1.5",
  "_inCache": true,
  "_location": "/back",
  "_phantomChildren": {},
  "_requested": {
    "name": "back",
    "raw": "back@https://registry.npmjs.org/back/-/back-0.1.5.tgz",
    "rawSpec": "https://registry.npmjs.org/back/-/back-0.1.5.tgz",
    "scope": null,
    "spec": "https://registry.npmjs.org/back/-/back-0.1.5.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/mana"
  ],
  "_resolved": "https://registry.npmjs.org/back/-/back-0.1.5.tgz",
  "_shasum": "342b96b804657b03ec9a31f248a11f200608dcc2",
  "_shrinkwrap": null,
  "_spec": "back@https://registry.npmjs.org/back/-/back-0.1.5.tgz",
  "_where": "/home/gilles/Documents/development/development-environment",
  "author": {
    "email": "jcrugzz@gmail.com",
    "name": "Jarrett Cruger"
  },
  "bugs": {
    "url": "https://github.com/jcrugzz/back/issues"
  },
  "dependencies": {},
  "description": "Simple exponential backoff pulled out of Primus by @3rd-Eden",
  "devDependencies": {
    "tape": "2.1.x"
  },
  "engines": {
    "node": "0.10.x || 0.8.x"
  },
  "homepage": "https://github.com/jcrugzz/back#readme",
  "keywords": [
    "backoff",
    "exponential",
    "random"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "back",
  "optionalDependencies": {},
  "readme": "# back\n\n[![build\nstatus](https://secure.travis-ci.org/jcrugzz/back.png)](http://travis-ci.org/jcrugzz/back)\n\n[![NPM](https://nodei.co/npm/back.png)](https://nodei.co/npm/back/)\n\nA simple module to be used for creating exponentially weighted backoff attempts.\nUsed in [Primus][Primus]\n\n## Example\n\n```js\nvar http = require('http');\nvar back = require('back');\n//\n// Options to use for backoff\n//\n// Remark: This object is modified so it should be cloned if you are dealing\n// with independent backoff attempts and want to use these values as a base.\n//\nvar backoff = {\n  retries: 3,\n  minDelay: 1000, // Defaults to 500ms\n  maxDelay: 10000, // Defaults to infinity\n  // The following option is shown with its default value but you will most\n  // likely never define it as it creates the exponential curve.\n  factor: 2,\n};\n\nfunction retry(err) {\n  return back(function (fail) {\n    if (fail) {\n      // Oh noez we never reconnect :(\n      console.error('Retry failed with ' + err.message);\n      process.exit(1);\n    }\n    //\n    // Remark: .attempt and .timeout are added to this object internally\n    //\n    console.log('Retry attempt # ' + backoff.attempt +\n                ' being made after ' + backoff.timeout + 'ms');\n  request();\n  }, backoff);\n}\n\nfunction request() {\n  http.get('http://localhost:9000', function (res) {\n    console.log('Successful Response that will not happen!');\n  }).on('error', retry);\n}\n\nrequest();\n```\n\n## API\n\n`back(callback, backoffOpts);`\n\nThe `back` function returns you a function that simply executes the `callback`\nafter a `setTimeout`. The timeout is what is based on an [exponential\nbackoff](http://dthain.blogspot.nl/2009/02/exponential-backoff-in-distributed.html) of course!\n\n### Note:\n\nI am considering switching the `backoffOpts` and `callback` as I understand it\nis an irregular api if enough people want it.\n\n[Primus]: https://github.com/3rd-Eden/primus\n\n",
  "readmeFilename": "README.md",
  "repository": {
    "url": "git://github.com/jcrugzz/back.git"
  },
  "scripts": {
    "test": "tape test/*.js"
  },
  "version": "0.1.5"
}

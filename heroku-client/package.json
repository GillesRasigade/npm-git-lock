{
  "_args": [
    [
      "heroku-client@https://registry.npmjs.org/heroku-client/-/heroku-client-1.11.0.tgz",
      "/home/gilles/Documents/development/development-environment"
    ]
  ],
  "_from": "heroku-client@>=1.9.0 <2.0.0",
  "_id": "heroku-client@1.11.0",
  "_inCache": true,
  "_location": "/heroku-client",
  "_phantomChildren": {},
  "_requested": {
    "name": "heroku-client",
    "raw": "heroku-client@https://registry.npmjs.org/heroku-client/-/heroku-client-1.11.0.tgz",
    "rawSpec": "https://registry.npmjs.org/heroku-client/-/heroku-client-1.11.0.tgz",
    "scope": null,
    "spec": "https://registry.npmjs.org/heroku-client/-/heroku-client-1.11.0.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/hubot-heroku"
  ],
  "_resolved": "https://registry.npmjs.org/heroku-client/-/heroku-client-1.11.0.tgz",
  "_shasum": "9ff0e041a3d1b363a72fa01ff876b316f6985773",
  "_shrinkwrap": null,
  "_spec": "heroku-client@https://registry.npmjs.org/heroku-client/-/heroku-client-1.11.0.tgz",
  "_where": "/home/gilles/Documents/development/development-environment",
  "author": {
    "name": "Jonathan Clem"
  },
  "bugs": {
    "url": "https://github.com/heroku/node-heroku-client/issues"
  },
  "contributors": [
    {
      "name": "Jonathan Clem"
    },
    {
      "name": "Ray McDermott"
    },
    {
      "name": "Bob Zoller"
    },
    {
      "name": "Sehrope Sarkuni"
    }
  ],
  "dependencies": {
    "concat-stream": "^1.4.8",
    "inflection": "^1.7.0",
    "lazy.js": "^0.4.0",
    "logfmt": "^1.1.2",
    "memjs": "^0.8.5",
    "path-proxy": "^1.0",
    "q": "^1.2.0",
    "simple-encryptor": "^1.0.2"
  },
  "description": "A wrapper for the Heroku v3 API",
  "devDependencies": {
    "jasmine-node": "^1.14.5",
    "jshint": "^2.5.3"
  },
  "homepage": "https://github.com/heroku/node-heroku-client#readme",
  "jshintConfig": {
    "curly": true,
    "eqeqeq": true,
    "forin": true,
    "globals": {
      "afterEach": false,
      "before": false,
      "beforeEach": false,
      "describe": false,
      "expect": false,
      "it": false,
      "jasmine": false,
      "spyOn": false
    },
    "globalstrict": true,
    "node": true,
    "quotmark": "single",
    "undef": true,
    "unused": true
  },
  "keywords": [
    "heroku"
  ],
  "license": "MIT",
  "main": "./lib/heroku.js",
  "name": "heroku-client",
  "optionalDependencies": {},
  "readme": "# heroku-client [![Build Status](https://travis-ci.org/heroku/node-heroku-client.png?branch=master)](https://travis-ci.org/heroku/node-heroku-client)\n\nA wrapper around the [v3 Heroku API][platform-api-reference].\n\n- [Install](#install)\n- [Documentation](#documentation)\n- [Usage](#usage)\n  - [Generic Requests](#generic-requests)\n  - [Promises](#promises)\n  - [Generators](#generators)\n  - [HTTP Proxies](#http-proxies)\n- [Caching](#caching)\n  - [Caching with memjs](#caching-with-memjs)\n  - [Custom caching](#custom-caching)\n- [Contributing](#contributing)\n  - [Updating resources](#updating-resources)\n  - [Generating documentation](#generating-documentation)\n  - [Running tests](#running-tests)\n\n## Install\n\n```sh\n$ npm install heroku-client --save\n```\n\n## Documentation\n\nDocs are auto-generated and live in the\n[docs directory](https://github.com/heroku/node-heroku-client/tree/master/docs).\n\n## Usage\n\n`heroku-client` works by providing functions that return proxy objects for\ninteracting with different resources through the Heroku API.\n\nTo begin, require the Heroku module and create a client, passing in an API\ntoken:\n\n```javascript\nvar Heroku = require('heroku-client'),\n    heroku = new Heroku({ token: process.env.HEROKU_API_TOKEN });\n```\n\nThe simplest example is listing a user's apps. First, we call `heroku.apps()`,\nwhich returns a proxy object to the /apps endpoint, then we call `list()` to\nactually perform the API call:\n\n```javascript\nheroku.apps().list(function (err, apps) {\n  // `apps` is a parsed JSON response from the API\n});\n```\n\nThe advantage of using proxy objects is that they are reusable. Let's get the\ninfo for the user's app \"my-app\", get the dynos for the app, and\nremove a collaborator:\n\n```javascript\nvar app = heroku.apps('my-app');\n\napp.info(function (err, app) {\n  // Details about the `app`\n});\n\napp.dynos().list(function (err, dynos) {\n  // List of the app's `dynos`\n});\n\napp.collaborators('user@example.com').delete(function (err, collaborator) {\n  // The `collaborator` has been removed unless `err`\n});\n```\n\nRequests that require a body are easy, as well. Let's add a collaborator to\nthe user's app \"another-app\":\n\n```javascript\nvar app  = heroku.apps('another-app'),\n    user = { email: 'new-user@example.com' };\n\napp.collaborators().create({ user: user }, function (err, collaborator) {\n  // `collaborator` is the newly added collaborator unless `err`\n});\n```\n\n### Generic Requests\n\nheroku-client has `get`, `post`, `patch`, and `delete` functions which can make\nrequests with the specified HTTP method to any endpoint:\n\n```javascript\nheroku.get('/apps', function (err, apps) {\n});\n\n// Request body is optional on both `post` and `patch`\nheroku.post('/apps', function (err, app) {\n});\n\nheroku.post('/apps', { name: 'my-new-app' }, function (err, app) {\n});\n\nheroku.patch('/apps/my-app', { name: 'my-renamed-app' }, function (err, app) {\n});\n\nheroku.delete('/apps/my-old-app', function (err, app) {\n});\n```\n\nThere is also an even more generic `request` function that can accept many more\noptions:\n\n```javascript\nheroku.request({\n  method: 'GET',\n  path: '/apps',\n  headers: {\n    'Foo': 'Bar'\n  },\n  parseJSON: false\n}, function (err, responseBody) {\n});\n```\n\n### Promises\n\nheroku-client works with Node-style callbacks, but also implements promises with\nthe [Q][q] library.\n\n```javascript\nvar q = require('q');\n\n// Fetches dynos for all of my apps.\nheroku.apps().list().then(function (apps) {\n\n  return q.all(apps.map(function (app) {\n    return heroku.apps(app.name).dynos().list();\n  }));\n\n}).then(function (dynos) {\n\n  console.log(dynos);\n\n});\n```\n\n### Generators\n\nIt's easy to get heroku-client working with [generators][generators]. In this\nexample, I'll use the [co][co] library to wrap a function that will get the list\nof all of my apps, and then get the dynos for each of those apps:\n\n```javascript\nlet co     = require('co');\nlet heroku = require('heroku-client');\nlet hk     = heroku.createClient({ token: process.env.HEROKU_API_KEY });\n\nlet main = function* () {\n  let apps  = yield hk.apps().list();\n  let dynos = yield apps.map(getDynos);\n\n  console.log(dynos);\n\n  function getDynos(app) {\n    return hk.apps(app.name).dynos().list();\n  }\n};\n\nco(main)();\n```\n\nAs long as you're using Node >= 0.11, you can run this script with:\n\n```sh\n$ node --harmony --use-strict file.js\n```\n\nHooray, no callbacks or promises in sight!\n\n### HTTP Proxies\n\nIf you'd like to make requests through an HTTP proxy, set the\n`HEROKU_HTTP_PROXY_HOST` environment variable with your proxy host, and\n`HEROKU_HTTP_PROXY_PORT` with the desired port (defaults to 8080). heroku-client\nwill then make requests through this proxy instead of directly to\napi.heroku.com.\n\n## Caching\n\nheroku-client can optionally perform caching of API requests.\n\nheroku-client will cache any response from the Heroku API that comes with an\n`ETag` header, and each response is cached individually (i.e. even though the\nclient might make multiple calls for a user's apps and then aggregate them into\na single JSON array, each required API call is individually cached). For each\nAPI request it performs, heroku-client sends an `If-None-Match` header if there\nis a cached response for the API request. If API returns a 304 response code,\nheroku-client returns the cached response. Otherwise, it writes the new API\nresponse to the cache and returns that.\n\nTo tell heroku-client to perform caching, call the `configure` function.\n\nCaching requires an encryption key to encrypt the results prior to caching.\nThis must be set in the environment variable HEROKU_CLIENT_ENCRYPTION_SECRET.\n`HEROKU_CLIENT_ENCRYPTION_SECRET` should be a long, random string of characters.\nheroku-client includes [`bin/secret`][bin_secret] as one way of generating\nvalues for this variable. **Do not publish this secret or commit it to source\ncontrol. If it's compromised, flush your memcache and generate a new encryption\nsecret.**\n\n### Caching with memjs\n\nIf `cache` is the boolean value `true` then heroku-client will use `memjs` for caching.\n\nExample:\n\n```javascript\nvar Heroku = require('heroku').configure({ cache: true });\n```\n\nThis requires a `MEMCACHIER_SERVERS` environment variable, as well as a\n`HEROKU_CLIENT_ENCRYPTION_SECRET` environment variable that heroku-client uses\nto build cache keys and encrypt cache contents.\n\n`MEMCACHIER_SERVERS` can be a single `hostname:port` memache address, or a\ncomma-separated list of memcache addresses, e.g.\n`example.com:11211,example.net:11211`. Note that while the environment variable\nthat memjs looks for is\n[named for the MemCachier service it was originally built for][memcachier], it\nwill work with any memcache server that speaks the binary protocol.\n\n### Custom caching\n\nAlternatively you can specify a custom cache implementation. Your custom implementation must define `get(key, cb(err, value))` and `set(key, value)` functions.\n\nHere's a sample implementation that uses Redis to cache API responses for 5-minutes each:\n\n```javascript\nvar redis        = require('redis');\nvar client       = redis.createClient();\nvar cacheTtlSecs = 5 * 60; // 5 minutes\n\nvar redisCache = {\n  get: function(key, cb) {\n    // Namespace the keys:\n    var redisKey = 'heroku:api:' + key;\n    client.GET(redisKey, cb);\n  },\n\n  set: function(key, value) {\n    // Namespace the keys:\n    var redisKey = 'heroku:api:' + key;\n    client.SETEX(redisKey, cacheTtlSecs, value, function(err) {\n      // ignore errors on set\n    });\n  }\n};\n\nvar Heroku = require('heroku-client');\nHeroku.configure({\n  cache: redisCache\n});\n```\n\n## Contributing\n\n### Updating resources\n\nTo fetch the latest schema, generate documentation, and run the tests:\n\n```sh\n$ bin/update\n```\n\nInspect your changes, and\n[bump the version number accordingly](http://semver.org/) when cutting a\nrelease.\n\n### Generating documentation\n\nDocumentation for heroku-client is auto-generated from\n[the API schema](https://github.com/heroku/node-heroku-client/blob/master/lib/schema.js).\n\nDocs are generated like so:\n\n```bash\n$ bin/docs\n```\n\nGenerating docs also runs a cursory test, ensuring that every documented\nfunction *is* a function that can be called.\n\n### Running tests\n\nheroku-client uses [jasmine-node][jasmine-node] for tests:\n\n```bash\n$ npm test\n```\n\n[platform-api-reference]: https://devcenter.heroku.com/articles/platform-api-reference\n[q]: https://github.com/kriskowal/q\n[memjs]: https://github.com/alevy/memjs\n[bin_secret]: https://github.com/heroku/node-heroku-client/blob/master/bin/secret\n[memcachier]: https://www.memcachier.com\n[jasmine-node]: https://github.com/mhevery/jasmine-node\n[generators]: https://github.com/JustinDrake/node-es6-examples#generators\n[co]: https://github.com/visionmedia/co\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/heroku/node-heroku-client.git"
  },
  "scripts": {
    "test": "jasmine-node spec && jshint lib spec"
  },
  "version": "1.11.0"
}

{
  "_args": [
    [
      "memjs@https://registry.npmjs.org/memjs/-/memjs-0.8.9.tgz",
      "/home/gilles/Documents/development/development-environment"
    ]
  ],
  "_from": "memjs@>=0.8.5 <0.9.0",
  "_id": "memjs@0.8.9",
  "_inCache": true,
  "_location": "/memjs",
  "_phantomChildren": {},
  "_requested": {
    "name": "memjs",
    "raw": "memjs@https://registry.npmjs.org/memjs/-/memjs-0.8.9.tgz",
    "rawSpec": "https://registry.npmjs.org/memjs/-/memjs-0.8.9.tgz",
    "scope": null,
    "spec": "https://registry.npmjs.org/memjs/-/memjs-0.8.9.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/heroku-client"
  ],
  "_resolved": "https://registry.npmjs.org/memjs/-/memjs-0.8.9.tgz",
  "_shasum": "578d5c5a3c31711a9d137fcccc5af41147edc5ed",
  "_shrinkwrap": null,
  "_spec": "memjs@https://registry.npmjs.org/memjs/-/memjs-0.8.9.tgz",
  "_where": "/home/gilles/Documents/development/development-environment",
  "author": {
    "name": "Amit Levy"
  },
  "bugs": {
    "url": "https://github.com/alevy/memjs/issues"
  },
  "contributors": [
    {
      "name": "Amit Levy",
      "email": "amit@amitlevy.com",
      "url": "http://amitlevy.com"
    },
    {
      "name": "Sho Hashimoto",
      "email": "hashimoto@shokai.org",
      "url": "http://shokai.org/blog"
    },
    {
      "name": "Pelle Wessman",
      "email": "pelle@kpdfabrik.se",
      "url": "http://kodfabrik.se/"
    },
    {
      "name": "Liam Don",
      "email": "liam@classdojo.com",
      "url": "https://github.com/liamdon"
    },
    {
      "name": "Adam Loving",
      "url": "http://adamloving.com"
    },
    {
      "name": "David Terei",
      "email": "code@davidterei.com",
      "url": "https://davidterei.com"
    },
    {
      "name": "Jeff Miccolis",
      "email": "jeff@miccolis.net",
      "url": "https://twitter.com/miccolis"
    },
    {
      "name": "Andrew Pendleton",
      "email": "andrew@mapbox.com",
      "url": "https://github.com/apendleton"
    }
  ],
  "dependencies": {},
  "description": "A memcache client for node using the binary protocol and SASL authentication",
  "devDependencies": {
    "benchmark": "1.0.0",
    "expresso": "0.9.2",
    "microtime": "0.6.0"
  },
  "directories": {
    "lib": "./lib/memjs"
  },
  "engines": {
    "node": ">=0.6.18"
  },
  "homepage": "http://github.com/alevy/memjs",
  "main": "./lib/memjs/memjs",
  "name": "memjs",
  "optionalDependencies": {},
  "readme": "MemJS\n=====\n\n[![npm](http://img.shields.io/npm/v/memjs.svg)](https://www.npmjs.com/package/memjs)\n[![Build Status](https://secure.travis-ci.org/alevy/memjs.png)](http://travis-ci.org/alevy/memjs?branch=master)\n[![Gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/alevy/memjs?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge)\n\nMemJS is a pure Node.js client library for using memcache, in particular, the\n[MemCachier](http://memcachier.com/) service. It\nuses the binary protocol and support SASL authentication.\n\nDocumentation can be found here: [http://amitlevy.com/projects/memjs/](http://amitlevy.com/projects/memjs/)\n\n## TOC\n\n  1. [Requirements](#requirements)\n  2. [Installation](#installation)\n  3. [Configuration](#configuration)\n  4. [Usage](#usage)\n  5. [How to help](#contributing)\n\n## Requirements\n\n### Supported Node.js versions ###\n\nMemJS is tested to work with version 0.6 or higher of Node.js.\n\n## Installation ##\n\nMemJS is available from the npm registry:\n\n    $ npm install memjs\n\nTo install from git:\n\n    $ git clone git://github.com/alevy/memjs.git\n    $ cd memjs\n    $ npm link\n\nMemJS was designed for the MemCachier memcache service but will work with any\nmemcache server that speaks the binary protocol. Many software repositories\nhave a version of memcacached available for installation:\n\n### Ubuntu ###\n\n    $ apt-get install memcached\n\n### OS X ###\n\n    $ brew install memcached\n\n## Configuration ##\n\nMemJS understands the following environment variables:\n\n* `MEMCACHIER_SERVERS` - used to determine which servers to connect to. Should be a comma separated list of _[hostname:port]_.\n* `MEMCACHIER_USERNAME` - if present with `MEMCACHIER_PASSWORD`, MemJS will try to authenticated to the server using SASL.\n* `MEMCACHIER_PASSWORD` - if present with `MEMCACHIER_USERNAME`, MemJS will try to authenticated to the server using SASL.\n* `MEMCACHE_USERNAME` - used if `MEMCACHIER_USERNAME` is not present\n* `MEMCACHE_PASSWORD` - used if `MEMCACHIER_PASSWORD` is not present\n\nEnvironment variables are only used as a fallback for explicit parameters.\n\n## Usage ##\n\nYou can start using MemJS immediately from the node console:\n\n    $ var memjs = require('memjs')\n    $ var client = memjs.Client.create()\n    $ client.get('hello', function(err, val) { console.log(val); })\n\n### Settings Values\n\n``` javascript\nclient.set('hello', 'world', function(err, val) {\n\n}, 600);\n```\n\nThe `set(key, val, callback, expiration)` function accepts the following parameters.\n\n* `key`: key to set\n* `val`: value to set\n* `callback`: a callback invoked after the value is set\n  * `err` : error\n  * `val` : value retrieved\n* `expiration`: time interval, in seconds, after which memcached will expire the object\n\n### Getting Values\n\n``` javascript\nclient.get('hello', function(err, val) {\n\n});\n```\n\nThe `get(key, callback)` function accepts the following parameters.\n\n* `key`: key to retrieve\n* `callback`: a callback invoked after the value is retrieved\n  * `err` : error\n  * `val` : value retrieved\n\n## Contributing\n\nThe best way to contribut to the project is by reporting bugs and testing unpublished\nversions. If you have a staging or development app, the easiest way to do this is\nusing the git repository as your `memjs` package dependency---in `package.json`:\n\n    {\n      \"name\": \"MyAppName\",\n      ...\n      \"dependencies\": {\n        ...\n        \"memjs\": \"git://github.com/alevy/memjs.git#master\"\n        ...\n      }\n    }\n\nIf you find a bug, please report as an [issue](https://github.com/alevy/memjs/issues/new).\nIf you fix it, please don't hesitate to send a pull request on GitHub or via\n[e-mail](http://www.kernel.org/pub/software/scm/git/docs/git-request-pull.html).\n\nFeature suggestions are also welcome! These includes suggestions about syntax and interface\ndesign.\n\nFinally, a great way to contribute is to implement a feature that's missing and send a pull\nrequest. The list below contains some planned features that have not been addressed yet. You\ncan also implement a feature not a list if you think it would be good.\n\n### TODOS ###\n\n* Support flags\n* Support prepend, append\n* Support multi commands\n* Support touch\n* Support CAS\n* Consistent hashing for keys and/or pluggable hashing algorithm\n\n## Copyright ##\n\nCopyright (c) 2012 Amit Levy, MemCachier. See LICENSE for details.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/alevy/memjs.git"
  },
  "scripts": {
    "bench": "NODE_PATH=lib/memjs/ node bench/memjs.js",
    "test": "NODE_PATH=lib/memjs/ expresso"
  },
  "version": "0.8.9"
}
